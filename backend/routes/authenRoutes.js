const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/userModel");
const Role = require("../models/roleModels");
const OtpRequest = require("../models/otpModels");

const router = express.Router();
const authMidleware = require("../middleware/authMidleware");
const sendEmail = require("../config/mailer");
// const AsyncStorage = await import("@react-native-async-storage/async-storage");

const isValidEmail = (email) => {
  return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email);
};

router.post("/register", async (req, res) => {
  try {
    console.log("üîπ Nh·∫≠n request ƒëƒÉng k√Ω:", req.body);

    const { email, name, password } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!email || !name || !password) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // Ki·ªÉm tra email c√≥ h·ª£p l·ªá kh√¥ng
    if (!isValidEmail(email)) {
      return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ ƒë·ªß 8 k√Ω t·ª± kh√¥ng
    if (password.length < 8) {
      return res
        .status(400)
        .json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!" });
    }

    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o user m·ªõi
    const newUser = new User({
      email,
      name,
      password: hashedPassword,
      role_id: "67b841a3ecb6cc5e38dd0057",
    });

    // L∆∞u v√†o database
    await newUser.save();

    console.log("‚úî Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l∆∞u:", newUser);

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi c√≥ ch·ª©a th√¥ng tin user (kh√¥ng g·ª≠i password)
    return res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      user: { id: newUser._id, email, name },
    });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ message: "L·ªói server!" });
  }
});

router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u!" });
    }

    const user = await User.findOne({ email }).populate("role_id"); // L·∫•y c·∫£ role
    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }

    // T·∫°o token ch·ª©a userId v√† role
    const token = jwt.sign(
      { userId: user._id, role: user.role_id.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    // Log th√™m th√¥ng tin ƒë·ªÉ debug
    console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", {
      userId: user._id,
      email: user.email,
      role: user.role_id.role,
      roleId: user.role_id._id,
    });

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      role: user.role_id.role, // G·ª≠i role v·ªÅ FE
      userId: user._id,
      email: user.email,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});
router.get("/me", authMidleware(), async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).populate("role_id");
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }
    res.json({
      id: user._id,
      email: user.email,
      name: user.name,
      role: user.role_id.role,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

router.post("/change-password", authMidleware(), async (req, res) => {
  try {
    console.log("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    const { currentPassword, newPassword } = req.body;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: "Thi·∫øu m·∫≠t kh·∫©u c≈© ho·∫∑c m·ªõi!" });
    }

    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    console.log("üîç M·∫≠t kh·∫©u c≈© t·ª´ frontend:", currentPassword);
    console.log("üîç M·∫≠t kh·∫©u trong DB:", user.password);
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    console.log("üîç K·∫øt qu·∫£ so kh·ªõp:", isMatch);

    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!" });
    }
    const isValidPassword = (password) => {
      return /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(
        password
      );
    };

    if (!isValidPassword(newPassword)) {
      return res
        .status(400)
        .json({
          message:
            "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, ch·ª©a ch·ªØ, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát!",
        });
    }

    if (await bcrypt.compare(newPassword, user.password)) {
      return res
        .status(400)
        .json({ message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©!" });
    }
    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    console.log("üîë M·∫≠t kh·∫©u m·ªõi ƒë√£ hash:", hashedPassword);

    // C·∫≠p nh·∫≠t v√†o database
    user.password = hashedPassword;
    await user.save();

    console.log("‚úÖ M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");

    res.json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói server:", error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

router.post("/forgot-password", async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email!" });
    }

    // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // T·∫°o OTP 6 s·ªë
    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();

    // L∆∞u OTP v√†o database (X√≥a OTP c≈© n·∫øu c√≥)
    await OtpRequest.deleteMany({ user_id: user._id });
    const otpData = new OtpRequest({
      user_id: user._id,
      otp: otpCode,
      expires_at: new Date(Date.now() + 5 * 60 * 1000), // H·∫øt h·∫°n sau 5 ph√∫t
    });
    await otpData.save();

    // G·ª≠i email ch·ª©a OTP (s·ª≠ d·ª•ng h√†m helper)
    await sendEmail(
      email,
      "M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      `M√£ OTP c·ªßa b·∫°n l√†: ${otpCode}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`
    );
    res.json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email!" });
  } catch (error) {
    console.error("L·ªói g·ª≠i OTP:", error);
    res.status(500).json({ message: "L·ªói server!" });
  }
});

// router.post("/verify-otp", async (req, res) => {
//     try {
//         const { email, otp } = req.body;

//         if (!email || !otp) {
//             return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email v√† OTP!" });
//         }

//         // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i kh√¥ng
//         const user = await User.findOne({ email });
//         if (!user) {
//             return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
//         }

//         // Ki·ªÉm tra OTP trong database
//         const otpRecord = await OtpRequest.findOne({ user_id: user._id, otp });

//         if (!otpRecord) {
//             return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá!" });
//         }

//         // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
//         if (otpRecord.expires_at < new Date()) {
//             await OtpRequest.deleteOne({ _id: otpRecord._id });  // X√≥a OTP h·∫øt h·∫°n
//             return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n!" });
//         }

//         // X√≥a OTP sau khi x√°c th·ª±c th√†nh c√¥ng
//         await OtpRequest.deleteOne({ _id: otpRecord._id });

//         res.json({ message: "M√£ OTP h·ª£p l·ªá! B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
//     } catch (error) {
//         console.error("L·ªói x√°c th·ª±c OTP:", error);
//         res.status(500).json({ message: "L·ªói server!" });
//     }
// });

router.post("/verify-otp", async (req, res) => {
  try {
    const { email, otp } = req.body;

    if (!email || !otp) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email v√† OTP!" });
    }

    // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // Ki·ªÉm tra OTP trong database
    const otpRecord = await OtpRequest.findOne({ user_id: user._id, otp });

    if (!otpRecord) {
      return res
        .status(400)
        .json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
    if (otpRecord.expires_at < new Date()) {
      await OtpRequest.deleteOne({ _id: otpRecord._id }); // X√≥a OTP h·∫øt h·∫°n
      return res
        .status(400)
        .json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n, vui l√≤ng y√™u c·∫ßu m√£ m·ªõi!" });
    }

    // X√≥a OTP sau khi x√°c th·ª±c th√†nh c√¥ng
    await OtpRequest.deleteOne({ _id: otpRecord._id });

    res.json({ message: "M√£ OTP h·ª£p l·ªá! B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
  } catch (error) {
    console.error("L·ªói x√°c th·ª±c OTP:", error);
    res.status(500).json({ message: "L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
});

router.post("/reset-password", async (req, res) => {
  try {
    const { email, newPassword } = req.body;

    if (!email || !newPassword) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u m·ªõi!" });
    }

    // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi c√≥ h·ª£p l·ªá kh√¥ng
    const isValidPassword = (password) => {
      return /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(
        password
      );
    };

    if (!isValidPassword(newPassword)) {
      return res
        .status(400)
        .json({
          message:
            "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, ch·ª©a ch·ªØ, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát!",
        });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    res.status(500).json({ message: "L·ªói server!" });
  }
});

module.exports = router;
